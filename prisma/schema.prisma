// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum PaymentMethod {
  cash
  check
  credit
  others
}

// Optional: if you want explicit statuses (authorized, captured, refunded)
enum PaymentStatus {
  pending
  succeeded
  failed
  refunded
}

model customers {
  id            BigInt   @id @default(autoincrement())
  name          String   @db.VarChar(150)
  email String? @db.VarChar(255) // <- no @unique
  phone String? @db.VarChar(30)  // <- no @unique
  default_venue String?  @db.VarChar(200)
  notes         String?  @db.Text
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // relations
  events events[]
  @@index([name])
  @@index([email])
  @@index([phone])
}

model users {
  id         BigInt   @id @default(autoincrement())
  email      String   @unique @db.VarChar(150)
  password   String   @db.VarChar(255)
  name       String?  @db.VarChar(150)
  role       String   @default("user") @db.VarChar(50)
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

/// ---------- Lookups (unchanged) ----------
model category {
  id         BigInt   @id @default(autoincrement())
  name       String   @db.VarChar(100)
  slug       String   @unique @db.VarChar(100)
  active     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  category_units  category_unit[]
  event_caterings event_caterings[]
}

model menu_items {
  id          BigInt   @id @default(autoincrement())
  name        String   @unique @db.VarChar(150)
  description String?  @db.Text
  active      Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  event_catering_menu_items event_catering_menu_items[]
}

model sizes {
  id          BigInt   @id @default(autoincrement())
  name        String   @unique @db.VarChar(80)
  description String?  @db.Text
  active      Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  event_catering_menu_items event_catering_menu_items[]
}

model pricing_unit {
  code       String   @id @db.VarChar(50)
  label      String   @db.VarChar(100)
  qty_label  String   @db.VarChar(50)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  category_units        category_unit[]
  event_catering_orders event_catering_orders[]
}

model category_unit {
  category_id  BigInt
  unit_code    String       @db.VarChar(50)
  hint         String?      @db.VarChar(255)
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  category     category     @relation(fields: [category_id], references: [id], onDelete: Cascade)
  pricing_unit pricing_unit @relation(fields: [unit_code], references: [code], onDelete: Cascade)

  @@id([category_id, unit_code])
}

/// ---------- Core ----------
model events {
  id               BigInt   @id @default(autoincrement())
  gcalEventId      String?  @unique(map: "uniq_events_gcal_event_id")
  customer_id      BigInt?
  event_datetime   DateTime
  venue            String?  @db.VarChar(200)
  delivery_charges Decimal? @db.Decimal(12, 2)
  is_delivery      Boolean? @default(false)
  service_charges  Decimal? @db.Decimal(12, 2)
  headcount_est    Int?     @db.Int
  notes            String?  @db.Text
  calender_text    String?  @db.Text
  order_total      Decimal? @db.Decimal(12, 2)
  status           String?  @db.VarChar(50)
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  discount         Decimal? @db.Decimal(12, 2)

  // NEW relation
  customer customers? @relation(fields: [customer_id], references: [id], onDelete: SetNull)
  event_caterings event_caterings[]
  payments         event_payments[]       // <â€” relation


  @@index([customer_id])
}

// --- event_payments: one row per payment/attempt ---
model event_payments {
  id             BigInt        @id @default(autoincrement())
  event_gcal_id  String
  method         PaymentMethod
  amount         Decimal        @db.Decimal(12, 2)
  currency       String         @db.Char(3)
  paid_at        DateTime       @default(now())
  status         PaymentStatus  @default(succeeded)
  square_id      String?
  notes          String?
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt

  // relation to events via UNIQUE gcalEventId
  event events @relation(fields: [event_gcal_id], references: [gcalEventId], onDelete: Cascade, onUpdate: Cascade)

  @@index([event_gcal_id])
}

model event_caterings {
  id             BigInt   @id @default(autoincrement())
  event_id       BigInt
  category_id    BigInt
  title_override String?  @db.VarChar(150)
  instructions   String?  @db.Text
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  event    events   @relation(fields: [event_id], references: [id], onDelete: Cascade)
  category category @relation(fields: [category_id], references: [id], onDelete: Restrict)

  event_catering_orders event_catering_orders[]

  @@index([event_id])
  @@index([category_id])
}

model event_catering_orders {
  id                BigInt   @id @default(autoincrement())
  event_catering_id BigInt
  unit_code         String   @db.VarChar(50)
  pricing_mode      String   @db.VarChar(50)
  qty               Decimal  @db.Decimal(12, 2)
  unit_price        Decimal  @db.Decimal(12, 2)
  currency          String   @db.Char(3)
  line_subtotal     Decimal  @db.Decimal(12, 2)
  calc_notes        String?  @db.Text
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  event_catering event_caterings @relation(fields: [event_catering_id], references: [id], onDelete: Cascade)
  unit           pricing_unit    @relation(fields: [unit_code], references: [code], onDelete: Restrict)

  event_catering_menu_items event_catering_menu_items[]

  @@index([event_catering_id])
  @@index([unit_code])
}

model event_catering_menu_items {
  id                              BigInt   @id @default(autoincrement())
  event_catering_order_id         BigInt
  position_number                 Int
  size_id                         BigInt?
  item_id                         BigInt
  qty_per_unit                    Decimal  @db.Decimal(12, 2)
  component_price                 Decimal? @db.Decimal(12, 2)
  component_subtotal_for_one_unit Decimal? @db.Decimal(12, 2)
  notes                           String?  @db.Text
  created_at                      DateTime @default(now())
  updated_at                      DateTime @updatedAt

  order event_catering_orders @relation(fields: [event_catering_order_id], references: [id], onDelete: Cascade)
  size  sizes?                @relation(fields: [size_id], references: [id], onDelete: SetNull)
  item  menu_items            @relation(fields: [item_id], references: [id], onDelete: Restrict)

  @@index([event_catering_order_id])
  @@index([item_id])
  @@index([size_id])
}